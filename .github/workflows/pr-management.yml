name: PR Management

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  issues:
    types: [opened, edited]

jobs:
  label-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Auto-label based on changes
      uses: actions/labeler@v4
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        configuration-path: .github/labeler.yml
    
    - name: Label based on PR size
      uses: codelytv/pr-size-labeler@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        xs_label: 'size/xs'
        xs_max_size: 10
        s_label: 'size/s'
        s_max_size: 30
        m_label: 'size/m'
        m_max_size: 100
        l_label: 'size/l'
        l_max_size: 500
        xl_label: 'size/xl'
        fail_if_xl: false
    
    - name: Add security label for security-related PRs
      if: github.event_name == 'pull_request'
      run: |
        # Check if PR contains security-related keywords
        PR_BODY="${{ github.event.pull_request.body }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        if echo "$PR_BODY $PR_TITLE" | grep -iE "(security|vulnerability|cve|exploit|injection|xss|csrf)" > /dev/null; then
          gh pr edit ${{ github.event.pull_request.number }} --add-label "security"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Add documentation label for docs changes
      if: github.event_name == 'pull_request'
      run: |
        # Check for documentation changes
        if git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep -E "\.(md|txt|rst)$" > /dev/null; then
          gh pr edit ${{ github.event.pull_request.number }} --add-label "documentation"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        # Check if PR title follows conventional commit format
        if echo "$PR_TITLE" | grep -E "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+" > /dev/null; then
          echo "✅ PR title follows conventional commit format"
        else
          echo "⚠️ PR title should follow conventional commit format: type(scope): description"
          echo "Examples:"
          echo "  feat: add new architecture validation rule"
          echo "  fix(security): resolve vulnerability in input parsing"
          echo "  docs: update installation instructions"
          echo "  chore(deps): update dependencies"
        fi
    
    - name: Check for required files in PR
      run: |
        # Check if new features include documentation
        if git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep -E "\.(py)$" > /dev/null; then
          if ! git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep -E "\.(md)$" > /dev/null; then
            echo "💡 Consider updating documentation for Python changes"
          fi
        fi

  assign-reviewers:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event_name == 'pull_request'
    
    steps:
    - name: Auto-assign reviewers based on CODEOWNERS
      uses: hkusu/review-assign-action@v1
      with:
        assignees: ${{ github.actor }}
        # reviewers: comma-separated list of usernames if you have team members
    
    - name: Request review for large PRs
      if: github.event.pull_request.additions > 200 || github.event.pull_request.deletions > 200
      run: |
        gh pr comment ${{ github.event.pull_request.number }} --body "👀 This is a large PR. Please ensure thorough review of all changes."
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  welcome-contributor:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event_name == 'pull_request'
    
    steps:
    - name: Check if first-time contributor
      id: check-contributor
      run: |
        # Check if this is the user's first contribution
        AUTHOR="${{ github.event.pull_request.user.login }}"
        REPO="${{ github.repository }}"
        
        # Get PR count for this author
        PR_COUNT=$(gh api "repos/$REPO/pulls?state=all&creator=$AUTHOR" | jq length)
        
        if [ "$PR_COUNT" -eq 1 ]; then
          echo "first_time=true" >> $GITHUB_OUTPUT
        else
          echo "first_time=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Welcome first-time contributor
      if: steps.check-contributor.outputs.first_time == 'true'
      run: |
        gh pr comment ${{ github.event.pull_request.number }} --body "🎉 Welcome to the Architecture Review Agent project! Thank you for your first contribution. 

        Here's what happens next:
        - Our CI pipeline will run automated tests
        - The code will be reviewed for quality and security
        - We'll provide feedback and work with you to get this merged

        Please feel free to ask questions if you need any help!"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
